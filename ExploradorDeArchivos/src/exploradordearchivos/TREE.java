/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package exploradordearchivos;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Josue Gavidia
 */
public class TREE extends javax.swing.JFrame {

    /**
     * Creates new form TREE
     */
    File root = new File("Root");
    DefaultMutableTreeNode Raiz;
    DefaultTreeModel model;
    Logistics Logistica;

    public TREE(Logistics Logistica) {
        this.Logistica = Logistica;

        initComponents();
        createRoot();
    }

    public final JTree createTree() {
        Raiz = new DefaultMutableTreeNode(root.getName());

        DirectoryTree(new File("Root"), Raiz);

        model = new DefaultTreeModel(Raiz);
        return new JTree(model);
    }

    private void DirectoryTree(File Archivo, DefaultMutableTreeNode Raiz) {
        for (File Branches : Archivo.listFiles()) {
            if (Branches.isDirectory()) {
                DefaultMutableTreeNode TreeBranch = new DefaultMutableTreeNode(Branches.getName()); // level 1 node
                DirectoryTree(Branches, TreeBranch);
                Raiz.add(TreeBranch);
            } else {
                Raiz.add(new DefaultMutableTreeNode(Branches.getName()));
            }
        }
    }

    private void createRoot() {
        if (!root.exists()) {
            root.mkdir();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolito = createTree();
        jPanel2 = new javax.swing.JPanel();
        create = new javax.swing.JButton();
        cambiarName = new javax.swing.JButton();
        CrearArchivoTXT = new javax.swing.JButton();
        CrearArchivoBinario = new javax.swing.JButton();
        EscribirEnArchivo = new javax.swing.JButton();
        OrdenarPorFecha = new javax.swing.JButton();
        OrdenarPorNombre = new javax.swing.JButton();
        OrdenarPorTamagno = new javax.swing.JButton();
        OrdenarPorTipo = new javax.swing.JButton();
        Copiar = new javax.swing.JButton();
        Cortar = new javax.swing.JButton();
        Pegar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(arbolito);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 510));

        create.setText("Crear Carpeta");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        cambiarName.setText("Cambiar Nombre");
        cambiarName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarNameActionPerformed(evt);
            }
        });

        CrearArchivoTXT.setText("Crear archivo de texto");
        CrearArchivoTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearArchivoTXTActionPerformed(evt);
            }
        });

        CrearArchivoBinario.setText("Crear archivo comercial");
        CrearArchivoBinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearArchivoBinarioActionPerformed(evt);
            }
        });

        EscribirEnArchivo.setText("Escribir en archivo");
        EscribirEnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscribirEnArchivoActionPerformed(evt);
            }
        });

        OrdenarPorFecha.setText("Ordenar por fecha");
        OrdenarPorFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarPorFechaActionPerformed(evt);
            }
        });

        OrdenarPorNombre.setText("Ordenar por nombre");
        OrdenarPorNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarPorNombreActionPerformed(evt);
            }
        });

        OrdenarPorTamagno.setText("Ordenar por tama√±o");
        OrdenarPorTamagno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarPorTamagnoActionPerformed(evt);
            }
        });

        OrdenarPorTipo.setText("Ordenar por tipo");
        OrdenarPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarPorTipoActionPerformed(evt);
            }
        });

        Copiar.setText("Copiar");
        Copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiarActionPerformed(evt);
            }
        });

        Cortar.setText("Cortar");

        Pegar.setText("Pegar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OrdenarPorTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OrdenarPorTamagno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OrdenarPorNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EscribirEnArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CrearArchivoBinario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CrearArchivoTXT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cambiarName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OrdenarPorFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Copiar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Cortar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Pegar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cambiarName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CrearArchivoTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CrearArchivoBinario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EscribirEnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OrdenarPorFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OrdenarPorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OrdenarPorTamagno, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OrdenarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Copiar)
                    .addComponent(Cortar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pegar)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 230, 510));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        TreePath oldName = arbolito.getSelectionPath();
        if (oldName != null) {
            File Path = new File(Logistica.FindFolder(oldName.getLastPathComponent().toString()));
            try {
                Object FileName = JOptionPane.showInputDialog(this, "Ingrese el nombre de la carpeta:");
                if (!FileName.toString().isBlank()) {
                    Logistica.CreateDir(Path.getAbsolutePath(), FileName.toString());

                    createTree();
                    arbolito.setModel(model);
                }
            } catch (Exception Ex) {
            }
        }
    }//GEN-LAST:event_createActionPerformed

    private void cambiarNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarNameActionPerformed
        changeName(arbolito);
    }//GEN-LAST:event_cambiarNameActionPerformed

    private void CrearArchivoTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearArchivoTXTActionPerformed
        TreePath oldName = arbolito.getSelectionPath();
        if (oldName != null) {
            File Path = new File(Logistica.FindFolder(oldName.getLastPathComponent().toString()));
            try {
                Object FileName = JOptionPane.showInputDialog(this, "Ingrese el nombre de la carpeta:");
                if (!FileName.toString().isBlank()) {
                    Logistica.CreateTXTFile(Path.getAbsolutePath(), FileName.toString());

                    createTree();
                    arbolito.setModel(model);
                }
            } catch (Exception Ex) {
            }
        }
    }//GEN-LAST:event_CrearArchivoTXTActionPerformed

    private void CrearArchivoBinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearArchivoBinarioActionPerformed
        TreePath oldName = arbolito.getSelectionPath();
        if (oldName != null) {
            File Path = new File(Logistica.FindFolder(oldName.getLastPathComponent().toString()));
            try {
                Object FileName = JOptionPane.showInputDialog(this, "Ingrese el nombre de la carpeta:");
                if (!FileName.toString().isBlank()) {
                    Logistica.CreateComercialFile(Path.getAbsolutePath(), FileName.toString());

                    createTree();
                    arbolito.setModel(model);
                }
            } catch (Exception Ex) {
            }
        }
    }//GEN-LAST:event_CrearArchivoBinarioActionPerformed

    private void EscribirEnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscribirEnArchivoActionPerformed
        // Obtener el nodo seleccionado en el JTree
        TreePath selectedPath = arbolito.getSelectionPath();
        if (selectedPath == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo.");
            return;
        }

        // Obtener la ruta completa del archivo seleccionado en el JTree
        StringBuilder filePathBuilder = new StringBuilder();
        for (Object node : selectedPath.getPath()) {
            DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) node;
            if (filePathBuilder.length() > 0) {
                filePathBuilder.append(File.separator); // Separador de archivos dependiente del sistema
            }
            filePathBuilder.append(treeNode.getUserObject().toString());
        }
        String filePath = filePathBuilder.toString();

        // Permitir al usuario ingresar el texto a registrar
        String texto = JOptionPane.showInputDialog(this, "Ingrese el texto a registrar:");
        if (texto == null || texto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se ha ingresado ning√∫n texto.");
            return;
        }

        // Escribir el texto en el archivo seleccionado
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, false))) {
            writer.write(texto);
            writer.newLine();
            JOptionPane.showMessageDialog(this, "Texto registrado correctamente en el archivo.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al escribir en el archivo: " + ex.getMessage());
        }
    }//GEN-LAST:event_EscribirEnArchivoActionPerformed

    private void OrdenarPorFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarPorFechaActionPerformed
        ordenarArchivosPorFecha();
    }//GEN-LAST:event_OrdenarPorFechaActionPerformed

    private void OrdenarPorTamagnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarPorTamagnoActionPerformed
        ordenarArchivosPorTama√±o();
    }//GEN-LAST:event_OrdenarPorTamagnoActionPerformed

    private void OrdenarPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarPorTipoActionPerformed
        ordenarArchivosPorTipo();
    }//GEN-LAST:event_OrdenarPorTipoActionPerformed

    private void OrdenarPorNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarPorNombreActionPerformed
        ordenarArchivosPorNombre();
    }//GEN-LAST:event_OrdenarPorNombreActionPerformed

    private void CopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiarActionPerformed
        
    }//GEN-LAST:event_CopiarActionPerformed
    
    private void ordenarArchivos(Comparator<File> comparator) {
        // Obtener el nodo seleccionado en el JTree
        TreePath selectedPath = arbolito.getSelectionPath();
        if (selectedPath == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una carpeta.");
            return;
        }

        // Obtener el nodo seleccionado
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selectedPath.getLastPathComponent();
        if (!selectedNode.isLeaf()) {
            // Obtener la ruta de la carpeta seleccionada
            StringBuilder folderPathBuilder = new StringBuilder();
            for (Object node : selectedPath.getPath()) {
                DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) node;
                if (folderPathBuilder.length() > 0) {
                    folderPathBuilder.append(File.separator); // Separador de archivos dependiente del sistema
                }
                folderPathBuilder.append(treeNode.getUserObject().toString());
            }
            String folderPath = folderPathBuilder.toString();

            // Obtener los archivos de la carpeta seleccionada
            File folder = new File(folderPath);
            File[] files = folder.listFiles();
            if (files != null) {
                Arrays.sort(files, comparator);
                actualizarJTree(selectedNode, files);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una carpeta, no un archivo.");
        }
    }

    private void actualizarJTree(DefaultMutableTreeNode parentNode, File[] files) {
        // Limpiar los nodos hijos existentes
        parentNode.removeAllChildren();

        // Agregar los archivos ordenados como nodos hijos
        for (File file : files) {
            DefaultMutableTreeNode fileNode = new DefaultMutableTreeNode(file.getName());
            parentNode.add(fileNode);
        }

        // Actualizar el JTree
        model.reload(parentNode);
    }
    
    private void ordenarArchivosPorNombre() {
        ordenarArchivos(new Comparator<File>() {
            @Override
            public int compare(File f1, File f2) {
                return f1.getName().compareToIgnoreCase(f2.getName());
            }
        });
    }
    
    private void ordenarArchivosPorTipo() {
        ordenarArchivos(new Comparator<File>() {
            @Override
            public int compare(File f1, File f2) {
                return getFileExtension(f1.getName()).compareTo(getFileExtension(f2.getName()));
            }

            private String getFileExtension(String fileName) {
                int dotIndex = fileName.lastIndexOf('.');
                return (dotIndex == -1) ? "" : fileName.substring(dotIndex + 1);
            }
        });
    }
    
    private void ordenarArchivosPorTama√±o() {
        ordenarArchivos(new Comparator<File>() {
            @Override
            public int compare(File f1, File f2) {
                return Long.compare(f2.length(), f1.length());
            }
        });
    }
    
    private void ordenarArchivosPorFecha() {
        ordenarArchivos(new Comparator<File>() {
            @Override
            public int compare(File f1, File f2) {
                return Long.compare(f1.lastModified(), f2.lastModified());
            }
        });
    }

    
private void changeName(JTree arbol) {
        TreePath oldName = arbol.getSelectionPath(); 
        if (oldName != null){
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) oldName.getLastPathComponent();
            String nuevo = JOptionPane.showInputDialog(null, "Nuevo nombre");
            selectedNode.setUserObject(nuevo);
            model.nodeChanged(selectedNode);
            model.reload();
        }
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TREE(new Logistics()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Copiar;
    private javax.swing.JButton Cortar;
    private javax.swing.JButton CrearArchivoBinario;
    private javax.swing.JButton CrearArchivoTXT;
    private javax.swing.JButton EscribirEnArchivo;
    private javax.swing.JButton OrdenarPorFecha;
    private javax.swing.JButton OrdenarPorNombre;
    private javax.swing.JButton OrdenarPorTamagno;
    private javax.swing.JButton OrdenarPorTipo;
    private javax.swing.JButton Pegar;
    private javax.swing.JTree arbolito;
    private javax.swing.JButton cambiarName;
    private javax.swing.JButton create;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
